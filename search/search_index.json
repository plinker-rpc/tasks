{
    "docs": [
        {
            "location": "/", 
            "text": "Tasks\n\n\nThe tasks component allows you to write code based tasks which are completed by a daemon, \nthis could allow you to create a single interface to control a cluster of servers tasks.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/tasks\n\n\n\n\n\nCRON Daemon\n\n\nYou should create a file which will be run via cron:\n\n\ncron.php\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\nif\n \n(\nphp_sapi_name\n()\n \n!=\n \ncli\n)\n \n{\n\n    \nheader\n(\nHTTP/1.0 403 Forbidden\n);\n\n    \nexit\n(\nCLI script\n);\n\n\n}\n\n\n\n$task\n \n=\n \nnew\n \nPlinker\\Tasks\\Runner\n([\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n\n    \n],\n\n    \ndebug\n       \n=\n \ntrue\n,\n\n    \nlog\n         \n=\n \ntrue\n,\n\n    \nsleep_time\n  \n=\n \n2\n,\n\n    \ntmp_path\n    \n=\n \n./.plinker\n,\n\n    \nauto_update\n \n=\n \n86400\n\n\n]);\n\n\n\n$task\n-\ndaemon\n(\nQueue\n);\n\n\n\n\n\n\nThen add a cron job:\n\n\n\n\n@reboot while sleep 1; do cd /var/www/html/examples/tasks \n /usr/bin/php run.php ; done\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n],\n\n    \n// displays output to task runner console\n\n    \ndebug\n \n=\n \ntrue\n,\n\n\n    \n// daemon sleep time\n\n    \nsleep_time\n \n=\n \n1\n,\n\n    \ntmp_path\n   \n=\n \n./.plinker\n\n\n]);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n],\n\n    \n// displays output to task runner console\n\n    \ndebug\n \n=\n \ntrue\n,\n\n\n    \n// daemon sleep time\n\n    \nsleep_time\n \n=\n \n1\n,\n\n    \ntmp_path\n   \n=\n \n./.plinker\n\n\n]);\n\n\n\n\n\n\nExample\n\n\n// create the task\n\n\ntry\n \n{\n\n    \n// create task\n\n    \n$client\n-\ntasks\n-\ncreate\n(\n\n        \n// name\n\n        \nHello World\n,\n\n        \n// source\n\n        \n?php\n \necho\n \nHello World\n;\n,\n\n\n        // type\n\n\n        \nphp\n,\n\n\n        // description\n\n\n        \n...\n,\n\n\n        // default params\n\n\n        []\n\n\n    );\n\n\n} catch (\\Exception $e) {\n\n\n    if ($e-\ngetMessage() == \nUnauthorised\n) {\n\n\n        echo \nError\n:\n \nConnected\n \nsuccessfully\n \nbut\n \ncould\n \nnot\n \nauthenticate\n!\n \nCheck\n \npublic\n \nand\n \nprivate\n \nkeys\n.\n;\n\n\n    } else {\n\n\n        echo \nError\n:\n.str_replace(\nCould\n \nnot\n \nunserialize\n \nresponse\n:\n, \n, trim(htmlentities($e-\ngetMessage())));\n\n\n    }\n\n\n}\n\n\n\n//run task now - executed as apache user\n\n\n$client-\ntasks-\nrunNow(\nHello\n \nWorld\n);\n\n\n\n// place task in queue to run every 5 seconds\n\n\n$client-\ntasks-\nrun(\nHello\n \nWorld\n, [1], 5);\n\n\n\n// get task status\n\n\n$client-\ntasks-\nstatus(\nHello\n \nWorld\n);\n\n\n\n// get task run count\n\n\n$client-\ntasks-\nrunCount(\nHello\n \nWorld\n);\n\n\n\n// clear all tasks\n\n\n$client\n-\ntasks\n-\nclear\n();\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nList\n\n\n....\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndir\n\n\nstring\n\n\nBase path to list files and folders from\n\n\n./\n\n\n\n\n\n\nextended\n\n\nbool\n\n\nReturn extended fileinfo\n\n\nfalse\n\n\n\n\n\n\ndepth\n\n\nint\n\n\nIterator depth\n\n\n10\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\nlist(\n./\n, false, 10);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nLinks\n\n\nWant to see an example project which uses this component?\n\n\n\n\nPlinkerUI\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Tasks"
        }, 
        {
            "location": "/#tasks", 
            "text": "The tasks component allows you to write code based tasks which are completed by a daemon, \nthis could allow you to create a single interface to control a cluster of servers tasks.", 
            "title": "Tasks"
        }, 
        {
            "location": "/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/tasks", 
            "title": "Install"
        }, 
        {
            "location": "/#cron-daemon", 
            "text": "You should create a file which will be run via cron:  cron.php  ?php  require   vendor/autoload.php ;  if   ( php_sapi_name ()   !=   cli )   { \n     header ( HTTP/1.0 403 Forbidden ); \n     exit ( CLI script );  }  $task   =   new   Plinker\\Tasks\\Runner ([ \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false \n     ], \n     debug         =   true , \n     log           =   true , \n     sleep_time    =   2 , \n     tmp_path      =   ./.plinker , \n     auto_update   =   86400  ]);  $task - daemon ( Queue );   Then add a cron job:   @reboot while sleep 1; do cd /var/www/html/examples/tasks   /usr/bin/php run.php ; done", 
            "title": "CRON Daemon"
        }, 
        {
            "location": "/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ], \n     // displays output to task runner console \n     debug   =   true , \n\n     // daemon sleep time \n     sleep_time   =   1 , \n     tmp_path     =   ./.plinker  ]);  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ], \n     // displays output to task runner console \n     debug   =   true , \n\n     // daemon sleep time \n     sleep_time   =   1 , \n     tmp_path     =   ./.plinker  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/#example", 
            "text": "// create the task  try   { \n     // create task \n     $client - tasks - create ( \n         // name \n         Hello World , \n         // source \n         ?php   echo   Hello World ; ,          // type           php ,          // description           ... ,          // default params          []      );  } catch (\\Exception $e) {      if ($e- getMessage() ==  Unauthorised ) {          echo  Error :   Connected   successfully   but   could   not   authenticate !   Check   public   and   private   keys . ;      } else {          echo  Error : .str_replace( Could   not   unserialize   response : ,  , trim(htmlentities($e- getMessage())));      }  }  //run task now - executed as apache user  $client- tasks- runNow( Hello   World );  // place task in queue to run every 5 seconds  $client- tasks- run( Hello   World , [1], 5);  // get task status  $client- tasks- status( Hello   World );  // get task run count  $client- tasks- runCount( Hello   World );  // clear all tasks  $client - tasks - clear ();", 
            "title": "Example"
        }, 
        {
            "location": "/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/#list", 
            "text": "....     Parameter  Type  Description  Default      dir  string  Base path to list files and folders from  ./    extended  bool  Return extended fileinfo  false    depth  int  Iterator depth  10     Call  $result = $client- files- list( ./ , false, 10);   Response", 
            "title": "List"
        }, 
        {
            "location": "/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/#links", 
            "text": "Want to see an example project which uses this component?   PlinkerUI", 
            "title": "Links"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }
    ]
}