{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute PHP component classes on remote systems, while maintaining the feel of a local method call.\n\n\nThe tasks component allows you to write code based tasks which are completed by a daemon, \nthis could allow you to create a single interface to control a cluster of servers tasks.\n\n\nWant to see an example project? Check out \nPlinkerUI\n.\n\n\nComposer\n\n\n{\n    \nrequire\n: {\n        \nplinker/core\n: \n=v0.1\n,\n        \nplinker/tasks\n: \n=v0.1\n\n    }\n}\n\n\n\n\n\nExample source\n\n\nYou should create a file which will be run via cron, for example:\n\n\ncron.php\n\n\n?php\n\n\nrequire\n \n../../vendor/autoload.php\n;\n\n\n\n/*\n\n\n * The cron job\n\n\n *\n\n\n * @reboot while sleep 1; do cd /var/www/html/examples/tasks \n /usr/bin/php run.php ; done\n\n\n */\n\n\n\nif\n \n(\nphp_sapi_name\n()\n \n!=\n \ncli\n)\n \n{\n\n    \nheader\n(\nHTTP/1.0 403 Forbidden\n);\n\n    \nexit\n(\nCLI script\n);\n\n\n}\n\n\n\n$task\n \n=\n \nnew\n \nPlinker\\Tasks\\Runner\n([\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n\n    \n],\n\n    \ndebug\n       \n=\n \ntrue\n,\n\n    \nlog\n         \n=\n \ntrue\n,\n\n    \nsleep_time\n  \n=\n \n2\n,\n\n    \ntmp_path\n    \n=\n \n./.plinker\n,\n\n    \nauto_update\n \n=\n \n86400\n\n\n]);\n\n\n\n$task\n-\ndaemon\n(\nQueue\n);\n\n\n\n\n\n\nMaking a remote call.\n\n\n?php\n\n\nrequire\n \n../../vendor/autoload.php\n;\n\n\n\n/**\n\n\n * Plinker Config\n\n\n */\n\n\n$config\n \n=\n \n[\n\n    \n// plinker connection\n\n    \nplinker\n \n=\n \n[\n\n        \nendpoint\n \n=\n \nhttp://127.0.0.1/examples/tasks/server.php\n,\n\n        \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n        \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n    \n],\n\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n],\n\n\n    \n// displays output to task runner console\n\n    \ndebug\n \n=\n \ntrue\n,\n\n\n    \n// daemon sleep time\n\n    \nsleep_time\n \n=\n \n1\n,\n\n    \ntmp_path\n   \n=\n \n./.plinker\n\n\n];\n\n\n\n// init plinker client\n\n\n$tasks\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \n// where is the plinker server\n\n    \n$config\n[\nplinker\n][\nendpoint\n],\n\n\n    \n// component namespace to interface to\n\n    \nTasks\\Manager\n,\n\n\n    \n// keys\n\n    \nhash\n(\nsha256\n,\n \ngmdate\n(\nh\n)\n.\n$config\n[\nplinker\n][\npublic_key\n]),\n\n    \nhash\n(\nsha256\n,\n \ngmdate\n(\nh\n)\n.\n$config\n[\nplinker\n][\nprivate_key\n]),\n\n\n    \n// construct values which you pass to the component, which the component\n\n    \n//  will use, for RedbeanPHP component you would send the database connection\n\n    \n//  dont worry its AES encrypted. see: encryption-proof.txt\n\n    \n$config\n\n\n);\n\n\n\n/**\n\n\n * Example\n\n\n */\n\n\n\n// create the task\n\n\ntry\n \n{\n\n    \n// create task\n\n    \n$tasks\n-\ncreate\n(\n\n        \n// name\n\n        \nHello World\n,\n\n        \n// source\n\n        \n?php echo \nHello World\n;\n,\n\n        \n// type\n\n        \nphp\n,\n\n        \n// description\n\n        \n...\n,\n\n        \n// default params\n\n        \n[]\n\n    \n);\n\n\n}\n \ncatch\n \n(\n\\Exception\n \n$e\n)\n \n{\n\n    \nif\n \n(\n$e\n-\ngetMessage\n()\n \n==\n \nUnauthorised\n)\n \n{\n\n        \necho\n \nError: Connected successfully but could not authenticate! Check public and private keys.\n;\n\n    \n}\n \nelse\n \n{\n\n        \necho\n \nError:\n.\nstr_replace\n(\nCould not unserialize response:\n,\n \n,\n \ntrim\n(\nhtmlentities\n(\n$e\n-\ngetMessage\n())));\n\n    \n}\n\n\n}\n\n\n\n//run task now - executed as apache user\n\n\n//print_r($tasks-\nrunNow(\nHello World\n));\n\n\n\n// place task in queue to run\n\n\nprint_r\n(\n$tasks\n-\nrun\n(\nHello World\n,\n \n[\n1\n],\n \n5\n));\n\n\n\n// get task status\n\n\nprint_r\n(\n$tasks\n-\nstatus\n(\nHello World\n));\n\n\n\n// get task run count\n\n\nprint_r\n(\n$tasks\n-\nrunCount\n(\nHello World\n));\n\n\n\n// clear all tasks\n\n\n//$tasks-\nclear();\n\n\n\n\n\n\nthen the server part...\n\n\n?php\n\n\nrequire\n \n../../vendor/autoload.php\n;\n\n\n\n/**\n\n\n * Plinker Server\n\n\n */\n\n\nif\n \n(\n$_SERVER\n[\nREQUEST_METHOD\n]\n \n==\n \nPOST\n)\n \n{\n\n\n    \n/**\n\n\n     * Plinker Config\n\n\n     */\n\n    \n$plinker\n \n=\n \n[\n\n        \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n        \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n    \n];\n\n\n    \n/**\n\n\n     * Plinker server listener\n\n\n     */\n\n    \nif\n \n(\nisset\n(\n$_POST\n[\ndata\n])\n \n\n        \nisset\n(\n$_POST\n[\ntoken\n])\n \n\n        \nisset\n(\n$_POST\n[\npublic_key\n])\n\n    \n)\n \n{\n\n        \n// test its encrypted\n\n        \nfile_put_contents\n(\n./.plinker/encryption-proof.txt\n,\n \nprint_r\n(\n$_POST\n,\n \ntrue\n));\n\n\n        \n//\n\n        \n$server\n \n=\n \nnew\n \n\\Plinker\\Core\\Server\n(\n\n            \n$_POST\n,\n\n            \nhash\n(\nsha256\n,\n \ngmdate\n(\nh\n)\n.\n$plinker\n[\npublic_key\n]),\n\n            \nhash\n(\nsha256\n,\n \ngmdate\n(\nh\n)\n.\n$plinker\n[\nprivate_key\n])\n\n        \n);\n\n\n        \nexit\n(\n$server\n-\nexecute\n());\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSee the \norganisations page\n for additional components and examples.", 
            "title": "Home"
        }, 
        {
            "location": "/#making-a-remote-call", 
            "text": "?php  require   ../../vendor/autoload.php ;  /**   * Plinker Config   */  $config   =   [ \n     // plinker connection \n     plinker   =   [ \n         endpoint   =   http://127.0.0.1/examples/tasks/server.php , \n         public_key    =   makeSomethingUp , \n         private_key   =   againMakeSomethingUp \n     ], \n\n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ], \n\n     // displays output to task runner console \n     debug   =   true , \n\n     // daemon sleep time \n     sleep_time   =   1 , \n     tmp_path     =   ./.plinker  ];  // init plinker client  $tasks   =   new   \\Plinker\\Core\\Client ( \n     // where is the plinker server \n     $config [ plinker ][ endpoint ], \n\n     // component namespace to interface to \n     Tasks\\Manager , \n\n     // keys \n     hash ( sha256 ,   gmdate ( h ) . $config [ plinker ][ public_key ]), \n     hash ( sha256 ,   gmdate ( h ) . $config [ plinker ][ private_key ]), \n\n     // construct values which you pass to the component, which the component \n     //  will use, for RedbeanPHP component you would send the database connection \n     //  dont worry its AES encrypted. see: encryption-proof.txt \n     $config  );  /**   * Example   */  // create the task  try   { \n     // create task \n     $tasks - create ( \n         // name \n         Hello World , \n         // source \n         ?php echo  Hello World ; , \n         // type \n         php , \n         // description \n         ... , \n         // default params \n         [] \n     );  }   catch   ( \\Exception   $e )   { \n     if   ( $e - getMessage ()   ==   Unauthorised )   { \n         echo   Error: Connected successfully but could not authenticate! Check public and private keys. ; \n     }   else   { \n         echo   Error: . str_replace ( Could not unserialize response: ,   ,   trim ( htmlentities ( $e - getMessage ()))); \n     }  }  //run task now - executed as apache user  //print_r($tasks- runNow( Hello World ));  // place task in queue to run  print_r ( $tasks - run ( Hello World ,   [ 1 ],   5 ));  // get task status  print_r ( $tasks - status ( Hello World ));  // get task run count  print_r ( $tasks - runCount ( Hello World ));  // clear all tasks  //$tasks- clear();   then the server part...  ?php  require   ../../vendor/autoload.php ;  /**   * Plinker Server   */  if   ( $_SERVER [ REQUEST_METHOD ]   ==   POST )   { \n\n     /**       * Plinker Config       */ \n     $plinker   =   [ \n         public_key    =   makeSomethingUp , \n         private_key   =   againMakeSomethingUp \n     ]; \n\n     /**       * Plinker server listener       */ \n     if   ( isset ( $_POST [ data ])   \n         isset ( $_POST [ token ])   \n         isset ( $_POST [ public_key ]) \n     )   { \n         // test its encrypted \n         file_put_contents ( ./.plinker/encryption-proof.txt ,   print_r ( $_POST ,   true )); \n\n         // \n         $server   =   new   \\Plinker\\Core\\Server ( \n             $_POST , \n             hash ( sha256 ,   gmdate ( h ) . $plinker [ public_key ]), \n             hash ( sha256 ,   gmdate ( h ) . $plinker [ private_key ]) \n         ); \n\n         exit ( $server - execute ()); \n     }  }   See the  organisations page  for additional components and examples.", 
            "title": "Making a remote call."
        }
    ]
}